package com.company;
import java.io.BufferedInputStream;
import java.util.*;
 public class Main {
    public static void main(String[] args){
        Scanner sc  = new Scanner(new BufferedInputStream(System.in));
        float sum, sum2;
        int n, totalTime, i;
        n = sc.nextInt();
         //所有的变量 总时间 到达时间 完成时间 工作时间 都是以秒为单位 并且不进位 比如;表示成 80秒 而不是1分20秒
        int[] arrivalTime = new int[n];
        int[] workTime = new int[n];
        int[] finishTime = new int[n];
         //输入到达时间和工作时间
        for (i = 0; i < n; i++)
            arrivalTime[i] = sc.nextInt();
        for (i = 0; i < n; i++)
            workTime[i] = sc.nextInt();
         //重要的是到达时间 没有到达的任务是不能执行的 到达了的任务分别按照三种算法来判断先算哪个 只需要建立哈希表 对到达时间进行排序 就能得到任务的执行顺序 下面进行哈希表排序
        Map<Integer, Integer> map = new HashMap<Integer, Integer>();
         //将进程编号 进程的到达时间放入哈希表 再由到达时间重新排序 即得到任务完成的顺序
        for (i = 0; i < n; i++)
            map.put(i, arrivalTime[i]);
         //将map.entrySet()转换成list
        List<Map.Entry<Integer, Integer>> list = new ArrayList<Map.Entry<Integer, Integer>>(map.entrySet());
        Collections.sort(list, new Comparator<Map.Entry<Integer, Integer>>() {
            //引入了双参数 因为是对哈希表的两个参数进行排列 必须要实现compare接口
            public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o2) {
                //return o1.getValue().compareTo(o2.getValue());
                return o1.getValue().compareTo(o2.getValue());
            }
        });
        //mapping.getKey() 即第i个进程， workTime[mapping.getKey()];即第i个进程的工作时间 把需要的工作时间依次存入总时间 再存入完成时间数组
         int[] resett = new int[n];
        i = 0;
        for (Map.Entry<Integer, Integer> mapping : list) {
            resett[i] = mapping.getKey();
            i++;
        }//将哈希表按照到达时间排序好的序列放入数组储存备用
         //1 FCFS 先来先服务
        System.out.println("1 FCFS");
        sum = 0;
        sum2 = 0;
        totalTime = 0;
        //1 FCFS 只要确定了到达时间 则任务完成的顺序固定
        for (i = 0; i < n; i++) {
            while (arrivalTime[resett[i]] > totalTime)  totalTime++;
            //如果当前队伍中最早来的进程还没有来 那这一秒就是空闲的 加上一秒 进入下一轮迭代 直到有进程到来
            //有作业了就做这个作业 根据FCFS 哈希表已经排序完毕了 先来先做 记录完成时间 总时间加上工作时间
            totalTime += workTime[resett[i]];
            finishTime[resett[i]] = totalTime;
        }
        //这里输出进程ID
        for (i = 0; i < n; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        //输出对应的完成时间 并计算总周转时间 总带权周转时间
        for (i = 0; i < n; i++) {
            System.out.print(finishTime[i] + " ");
            sum += (finishTime[i] - arrivalTime[i]);//sum用来计算平均周转时间
            sum2 += (float)(finishTime[i] - arrivalTime[i])/(float)workTime[i];//sum2用来计算平均带权周转时间
        }
        System.out.println();
        //平均周转时间 = sum/n
        System.out.println("Average turnover time: " + (float)sum/n);
        //平均带权周转时间 = sum2/n
        System.out.println("Average right turnover time: " + sum2/n);
        System.out.println();
         //2 短作业优先
        for (i = 0; i < n; i++)
            finishTime[i] = 0;
        totalTime = 0;
        System.out.println("2 SJF");
        //对短作业优先算法 类似的 当当前没有作业时 继续等待 当当前等待队列有两个以上的作业时 用短作业优先算法 决定先执行哪一个
        boolean flag;
        int mincount, min, finishNum;
        finishNum = 0;
        while (finishNum < n) {//当任务数小于n 即有任务没完成时就继续循环 直到任务都完成了
            flag = false;//判断这一秒有没有进程要做的标志 如果有进程做就做 否则这一秒就白费了
            mincount = Integer.MAX_VALUE;
            min = Integer.MAX_VALUE;
            for (i = 0; i < n; i++) {
                if(arrivalTime[resett[i]] <= totalTime) {//如果进程已经到达
                    if (finishTime[resett[i]] != 0) continue;//不能是做过的
                    if (min > workTime[resett[i]]) {
                        flag = true;
                        mincount = resett[i];
                        min = workTime[resett[i]];
                    }
                }
                else
                    break;//根据哈希表排列 有一个没到达 后面的都不会到达了
            }
             if(flag) {//如果有进程做就做 否则这一秒就白费了
                totalTime += workTime[mincount];
                finishTime[mincount] = totalTime;
                finishNum++;
            }
            else {
                totalTime++;
                continue;
            }
        }
         sum = 0;
        sum2 = 0;
        for (i = 0; i < n; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        //输出对应的完成时间 并计算总周转时间 总带权周转时间
        for (i = 0; i < n; i++) {
            System.out.print(finishTime[i] + " ");
             sum += (finishTime[i] - arrivalTime[i]);//sum用来计算平均周转时间
            sum2 += (float)(finishTime[i] - arrivalTime[i])/(float)workTime[i];//sum2用来计算平均带权周转时间
        }
        System.out.println();
        //平均周转时间 = sum/n
        System.out.println("Average turnover time: " + (float)sum/n);
        //平均带权周转时间 = sum2/n
        System.out.println("Average right turnover time: " + sum2/n);
        System.out.println();
         //3 高响应比优先调度算法（HRRN） 优先级 = 等待时间+服务时间/服务时间
        for (i = 0; i < n; i++)
            finishTime[i] = 0;
        System.out.println("3 HRRN");
        //高响应比优先调度算法 类似的 当当前没有作业时 继续等待 当当前等待队列有两个以上的作业时 高响应比优先调度算法 决定先执行哪一个
        int hignestProrityNum = 0;
        float prority;
        finishNum = 0;
        totalTime = 0;
        while (finishNum < n) {//当任务数小于n 即有任务没完成时就继续循环 直到任务都完成了
            flag = false;//判断这一秒有没有进程要做的标志 如果有进程做就做 否则这一秒就白费了
            prority = 0;
            for (i = 0; i < n; i++) {
                if(arrivalTime[resett[i]] <= totalTime) {//如果进程已经到达
                    if (finishTime[resett[i]] != 0) continue;//不能是做过的
                    if (prority < ((float)workTime[resett[i]] +(float)(totalTime - arrivalTime[resett[i]]))/(float)workTime[resett[i]]) {
                        flag = true;
                        hignestProrityNum = resett[i];
                        prority = ((float)workTime[resett[i]] +(float)(totalTime - arrivalTime[resett[i]]))/(float)workTime[resett[i]];
                    }
                }
                else
                    break;//根据哈希表排列 有一个没到达 后面的都不会到达了
            }
             if(flag) {//如果有进程做就做 否则这一秒就白费了
                totalTime += workTime[hignestProrityNum];
                finishTime[hignestProrityNum] = totalTime;
                finishNum++;
            }
            else {
                totalTime++;
                continue;
            }
        }
        sum = 0;
        sum2 = 0;
        for (i = 0; i < n; i++) {
            System.out.print(i + " ");
        }
        System.out.println();
        //输出对应的完成时间 并计算总周转时间 总带权周转时间
        for (i = 0; i < n; i++) {
            System.out.print(finishTime[i] + " ");
             sum += (finishTime[i] - arrivalTime[i]);//sum用来计算平均周转时间
            sum2 += (float)(finishTime[i] - arrivalTime[i])/(float)workTime[i];//sum2用来计算平均带权周转时间
        }
        System.out.println();
        //平均周转时间 = sum/n
        System.out.println("Average turnover time: " + (float)sum/n);
        //平均带权周转时间 = sum2/n
        System.out.println("Average right turnover time: " + sum2/n);
    }
}
